name: Publish to GitHub Packages

on:
  push:
    tags:
      - 'v*'
  workflow_dispatch:
    inputs:
      version_type:
        description: 'Version type to bump'
        required: true
        default: 'patch'
        type: choice
        options:
          - patch
          - minor
          - major

jobs:
  publish:
    runs-on: ubuntu-latest
    permissions:
      contents: write
      packages: write
      id-token: write

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          registry-url: 'https://npm.pkg.github.com'
          scope: '@min3studios'

      - name: Configure npm for GitHub Packages
        run: |
          echo "//npm.pkg.github.com/:_authToken=${{ secrets.GITHUB_TOKEN }}" >> ~/.npmrc

      - name: Setup pnpm
        uses: pnpm/action-setup@v2
        with:
          version: 8

      - name: Get pnpm store directory
        shell: bash
        run: |
          echo "STORE_PATH=$(pnpm store path --silent)" >> $GITHUB_ENV

      - name: Setup pnpm cache
        uses: actions/cache@v3
        with:
          path: ${{ env.STORE_PATH }}
          key: ${{ runner.os }}-pnpm-store-${{ hashFiles('**/pnpm-lock.yaml', '**/package.json') }}
          restore-keys: |
            ${{ runner.os }}-pnpm-store-

      - name: Install dependencies
        run: pnpm install --no-frozen-lockfile

      - name: Build package
        run: pnpm run build

      - name: Verify build output
        run: |
          echo "Checking if dist directory exists..."
          ls -la dist/ || echo "dist directory not found!"
          echo "Checking for main build files..."
          ls -la dist/klinecharts-pro.js || echo "ES module not found!"
          ls -la dist/klinecharts-pro.umd.js || echo "UMD module not found!"
          ls -la dist/index.d.ts || echo "Type definitions not found!"

      - name: Run tests (if available)
        run: pnpm test || echo "No tests found"
        continue-on-error: true

      - name: Bump version (manual trigger)
        if: github.event_name == 'workflow_dispatch'
        run: |
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"
          pnpm version ${{ github.event.inputs.version_type }} --no-git-tag-version
          NEW_VERSION=$(node -p "require('./package.json').version")
          echo "NEW_VERSION=v$NEW_VERSION" >> $GITHUB_ENV
          git add package.json
          git commit -m "chore: bump version to v$NEW_VERSION"
          git tag "v$NEW_VERSION"
          git push origin HEAD:main --tags
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Get version from tag (tag trigger)
        if: github.event_name == 'push' && startsWith(github.ref, 'refs/tags/')
        run: |
          echo "NEW_VERSION=${GITHUB_REF#refs/tags/}" >> $GITHUB_ENV

      - name: Publish to GitHub Packages
        run: pnpm publish --no-git-checks
        env:
          NODE_AUTH_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Create GitHub Release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ env.NEW_VERSION }}
          release_name: Release ${{ env.NEW_VERSION }}
          body: |
            ## Changes in ${{ env.NEW_VERSION }}
            
            See [CHANGELOG.md](CHANGELOG.md) for detailed changes.
            
            ## Installation
            
            ```bash
            # Configure npm to use GitHub Packages
            npm config set @min3studios:registry https://npm.pkg.github.com
            
            # Install the package
            npm install @min3studios/klinecharts-pro
            ```
            
            ## Quick Start
            
            ```typescript
            import { KLineChartPro } from '@min3studios/klinecharts-pro'
            import type { ChartProWithOrders } from '@min3studios/klinecharts-pro'
            
            const chart = new KLineChartPro({
              container: '#chart',
              symbol: { ticker: 'BTCUSDT' },
              datafeed: yourDatafeed
            }) as ChartProWithOrders
            
            // Add orders
            chart.setOrder({
              type: 'entry',
              side: 'buy',
              price: 45000,
              quantity: 0.1,
              symbol: 'BTCUSDT',
              status: 'filled'
            })
            ```
          draft: false
          prerelease: false